# Route in pages router:

In order to create a new route, just create a new file in "pages" folder and then give the name of the route. The convention is to name the page as the route name.

Example: pages folder => cabins.js file

# index.js file:

Basically, it is a root route in a folder.

# Nested routes:

With folders inside of "pages" folder, we can create the nested folders. We can also create index.js file inside there.

In simple words, the subfolder creates a new segment and index.js simply becomes the root route of that segment.

# Pages router:

The main difference of "pages router" is the application no longer uses the React Server Component model at all! All the components are client. So, we can use hooks anywhere. All of these components will simply be server-side rendered once and then HTML is sent to the browser and it's hydrated.

App Router implements this new architecture.

# _document.js:

The file where we can change in which the structure of HTML should like. Usually, we never touch this file, so we can just delete it and NextJS will use it internally.

# _app.js (custom app):

The file where we can write our own global layout (it's like a root layout in the app router, _app.js = layout.js).

Custom App accepts the "Component" (which is current page) and the "pageProps" (the props that are being passed to each Component).

# Favicon and global title:

These are made in _app.js file.

# API routes:

API routes are a lot more used than in "app router". This is the only way to do data mutations on the server. For this we must create "api" folder in "pages" and every file there will be treated as an API endpoint.

The filename will define the URL of that API endpoint.